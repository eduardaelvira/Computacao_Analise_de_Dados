help.start()
example(deriv)
install.packages("mosaic")
g <- D(x^2 ~ x)
g(2)
g <- deriv(x^2 ~ x)
help(deriv)
x <- deric(~ x^2, "x")
x <- deriv(~ x^2, "x")
x(2)
x(2)
x <- deriv(~ x^2, "2")
ls()
rm(ls())
rm(q <- ls())
x <- deriv(~ x^2, "2")
x
s <- deriv(~a^2,'a',func = T)
attr(s(4),'gradient')
x <- attr(s(4),'gradient')
s <- deriv(~a^2,'a',func = T)
x <- attr(s(4),'gradient')
View(s)
View(s)
View(s)
View(s)
func <- deriv(~sin(x)+x,'x',func = T)
x <- attr(func(2),'gradient')
y <- round(x, 3)
help(log)
log10(1000)
#factorial
fact <- log10(factorial(10))
fact_round <- round(fact, 2)
energy <- round(log(light*mass), 2)
#Exercicio da velocidade da luz
light <- 300000000 # m/s
mass <- 10 # kg
energy <- round(log(light*mass), 2)
log(3000000000)
e
euler
help(filter)
teste <- 1:10
fx <- function(x) {
return x^3 + x^2 + x
}
fx <- function(x)
{
return x^3 + x^2 + x
}
fx <- function(x) {
return(x^3 + x^2 + x)
}
fx(1)
fx(2)
filter(fx, teste)
teste <- 1:10
filter(fx, teste)
filter(teste, fx)
help("Vectorize")
rep.int
help(filter)
x <- 1:100
filter(x, rep(1, 3))
help(rep)
rep(1:4, 2)
x <- 1:100
filter(x, x*2)
help(filter)
#vetores
v<-c(2,5,7,8,9)
v
fx <- function(x) {
return(x^3 + x^2 + x)
}
amount <- 0
for (item in v) {
amount <- amount + fx(item)
}
amount
for (item in v) {
fx(item)
amount <- amount + fx(item)
}
help(mean)
mean(2,4)
example(mean)
x <- c(0:10, 50)
x
help("Map")
example("Map")
nv <- c()
for(item in v) {
append(nv, fx(item))
}
nv
#vetores
v<-c(2,5,7,8,9)
fx <- function(x) {
return(x^3 + x^2 + x)
}
nv <- c()
fx(2)
append(nv, fx(2))
nv
nv <- c()
append(nv, c(fx(2)))
nv
?ave
#vetores
v<-c(2,5,7,8,9)
fx <- function(x) {
#return(x^3 + x^2 + x)
return(1)
}
ave(fx(v))
fx(1)
fx(3)
fx(v)
fx(1:10)
fx <- function(x) {
return(x^3 + x^2 + x)
}
fx(1:10)
fx(v)
#vetores
v<-c(2,5,7,8,9)
fx <- function(x) {
return(x^3 + x^2 + x)
}
ave(fx(v))
fx(v)
14 +155 +399+ 584+ 819
1971/5
#vetores
v<-c(2,5,7,8,9)
fx <- function(x) {
return(x^3 + x^2 + x)
}
ave
ave(fx(v))
mean(fx(x))
mean(fx(v))
xx <- c(TRUE, 2)
xx
x <- 1:4
y <- 2:3
x*y
x
y
a <- c(1,2,3,4)
b <- c(1,2,3)
a*b
b <- c(2,4)
a*b
#primeiro
xx <- c(TRUE, 2)
xx
#segundo
x <- 1:4
y <- 2:3
x*y
help(mean)
c(1,2,3,-5,-5,-5,-5) > 0
c(c(1,2,3,-5,-5,-5,-5) > 0)
q <- c(1,2,3,-5,-5,-5,-5)
q[q > 0]
mean(q > 0)
mean(q > 0)
mean(q > 0)
q <- c(1,2,3,-5,-5,-5,-5,-5)
mean(q > 0)
escore_padronizado <- function(v) {
return(v - mean(v))/sd(v)
}
escore_padronizado(c(5,3,7,5,5,2,4))
num <- escore_padronizado(c(5,3,7,5,5,2,4))
num
vec <- c(5,3,7,5,5,2,4)
num <- escore_padronizado(vec)
num
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
vec <- c(5,3,7,5,5,2,4)
num <- escore_padronizado(vec)
num
vec <- c(5,3,7,5,5,2,4)
vec.z <- (vec-mean(vec))/sd(vec)
vec.z
vec <- c(5,3,7,5,5,3,4)
vec.z <- (vec-mean(vec))/sd(vec)
vec.z
vec <- c(5,3,7,5,5,3,4)
vec.z <- escore_padronizado(vec)
vec.z
escore_padronizado(teste.abdominal)
#quarto
teste.abdominal <- c(42, 38)
teste.salto <- c(102, 173)
teste.suspensao <- c(38, 71)
teste.correr <- c(2149, 1554)
teste.conhecimento <- c(97, 70)
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
escore_padronizado(teste.abdominal)
escore_padronizado(teste.salto)
escore_padronizado(teste.suspensao)
escore_padronizado(teste.correr)
escore_padronizado(teste.conhecimento)
#quarto
teste.abdominal <- c(42, 38)
teste.salto <- c(102, 173)
teste.suspensao <- c(38, 71)
teste.correr <- c(2149, 1554)
teste.conhecimento <- c(97, 70)
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
teste.abdominal <- escore_padronizado(teste.abdominal)
teste.salto <- escore_padronizado(teste.salto)
teste.suspensao <- escore_padronizado(teste.suspensao)
teste.correr <- escore_padronizado(teste.correr)
teste.conhecimento <- escore_padronizado(teste.conhecimento)
#quarto
teste.nome <- c("Maria", "Joana")
teste.abdominal <- c(42, 38)
teste.salto <- c(102, 173)
teste.suspensao <- c(38, 71)
teste.corrida <- c(2149, 1554)
teste.conhecimento <- c(97, 70)
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
dados
#quarto
dados.nome <- c("Maria", "Joana")
dados.abdominal <- c(42, 38)
dados.salto <- c(102, 173)
dados.suspensao <- c(38, 71)
dados.corrida <- c(2149, 1554)
dados.conhecimento <- c(97, 70)
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
dados_escalonado.abdominal <- escore_padronizado(dados.abdominal)
dados_escalonado.salto <- escore_padronizado(dados.salto)
dados_escalonado.suspensao <- escore_padronizado(dados.suspensao)
dados_escalonado.corrida <- escore_padronizado(dados.corrida)
dados_escalonado.conhecimento <- escore_padronizado(dados.conhecimento)
dados.nome <- c("Maria", "Joana")
dados.abdominal <- c(42, 38)
dados.salto <- c(102, 173)
dados.suspensao <- c(38, 71)
dados.corrida <- c(2149, 1554)
dados.conhecimento <- c(97, 70)
escore_padronizado <- function(v) {
return((v - mean(v))/sd(v))
}
escalonados.abdominal <- escore_padronizado(dados.abdominal)
escalonados.salto <- escore_padronizado(dados.salto)
escalonados.suspensao <- escore_padronizado(dados.suspensao)
escalonados.corrida <- escore_padronizado(dados.corrida)
escalonados.conhecimento <- escore_padronizado(dados.conhecimento)
escalonados.abdominal[1]
escalonados.abdominal[2]
escalonados.abdominal[0]
#quinto "vetor.RData precisa estar no mesmo folder deste script"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("vetor.RData")
mean(vetor01)
sum(vetor01)
which(is.na(vetor01))
vetor01$v1[vetor01$v1==99] <- NA
which(is.na(vetor01))
vetor01[is.na(vetor01)] <- 0
which(is.na(vetor01))
sum(vetor01)
mean(vetor01)
#quinto "vetor.RData precisa estar no mesmo folder deste script"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("vetor.RData")
which(is.na(vetor01))
vetor01[is.na(vetor01)] <- 0
which(is.na(vetor01))
mean(vetor01)
ave(vetor01)
which(!is.na(vetor01))
length(which(!is.na(vetor01)))
length(which(!is.na(vetor01)))
length(which(is.na(vetor01)))
load("vetor.RData")
length(which(is.na(vetor01)))
length(which(!is.na(vetor01)))
x <- c(which(!is.na(vetor01)))
mean(x)
x <- c(!is.na(vetor01))
x <- vetor01[c(!is.na(vetor01))]
mean(x)
median(x)
mode(x)
sd(x)
which(is.na(vetor01))
length(which(is.na(vetor01)))
mean(is.na(vetor01))
length(x > 7 & x < 8)
length(x > 9 | x < 1)
length(x > 9 | x < 1)
length(x > 7 & x < 8)
length(x > 9 | x < 1)
length(x > 7 && x < 8) #numero de alunos com notas entre 7 e 8
length(x > 9 || x < 1) #numero de alunos com notas menor que 1 ou maior que 9
length(x > 7 & x < 8) #numero de alunos com notas entre 7 e 8
length(x > 9 | x < 1) #numero de alunos com notas menor que 1 ou maior que 9
#primeiro
xx <- c(TRUE, 2)
xx
#quinto "vetor.RData precisa estar no mesmo folder deste script"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
load("vetor.RData")
x <- vetor01[c(!is.na(vetor01))] #lista apenas dos alunos com nota
mean(x)           #media
median(x)         #mediana
sd(x)             #desvio padrao
length(which(is.na(vetor01))) #numero de alunos que faltaram
mean(is.na(vetor01))  #procentagem dos alunos que faltaram
length(x > 7 & x < 8) #numero de alunos com notas entre 7 e 8
length(x > 9 | x < 1) #numero de alunos com notas menor que 1 ou maior que 9
length(vetor01 > 7 & vetor01 < 8) #numero de alunos com notas entre 7 e 8
length(vetor01 > 9 | vetor01 < 1) #numero de alunos com notas menor que 1 ou maior que 9
x
length(x > 7 & x < 8) #numero de alunos com notas entre 7 e 8
length(x > 9 | x < 1) #numero de alunos com notas menor que 1 ou maior que 9
length(x== 10)
length(x == 10)
x > 7 & x < 8
vetor01[1]
length(x > 7.0 & x < 8.0) #numero de alunos com notas entre 7 e 8
length(x > 9.0 | x < 1.0) #numero de alunos com notas menor que 1 ou maior que 9
